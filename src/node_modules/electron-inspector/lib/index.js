// Copyright (c) 2016 Vadim Macagon
// MIT License, see LICENSE file for full terms.
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var path = require("path");
var fs = require("fs");
var child_process = require("child_process");
var node_pre_gyp_1 = require("node-pre-gyp");
// default values of various `node-inspector` options
exports.NODE_INSPECTOR_DEFAULTS = {
    debugPort: 5858,
    webHost: '0.0.0.0',
    webPort: 8080,
    saveLiveEdit: false,
    preload: true,
    inject: true,
    stackTraceLimit: 50
};
function getElectronPackageVersion(moduleName) {
    // try to grab the version from the electron-prebuilt package if it's installed
    var packageText = fs.readFileSync(require.resolve(moduleName + "/package.json"), 'utf8');
    var packageJson = JSON.parse(packageText);
    return packageJson.version;
}
var electronVersionRegex = /^v(\d{1,2}\.\d{1,2}\.\d{1,2})$/;
/**
 * Obtain the path of the Electron executable and its version.
 *
 * @param exePath Path of an Electron executable, if omitted an attempt will be made to find it
 *                by looking for `electron`, `electron-prebuilt`, or `electron-prebuilt-compile`.
 * @return `null` if an Electron executable wasn't found, or its version couldn't be determined.
 */
function getElectronInfo(exePath) {
    // if a path to the electron executable was provided run it to figure out its version
    if (exePath) {
        if (fs.existsSync(exePath)) {
            try {
                var stdout = child_process.execFileSync(exePath, ['--version'], { encoding: 'utf8' });
                var version = stdout.replace(/[\r\n]/g, '');
                var match = electronVersionRegex.exec(version);
                if (match) {
                    return {
                        executablePath: exePath,
                        version: match[1]
                    };
                }
            }
            catch (error) {
            }
        }
        return null;
    }
    var candidates = ['electron-prebuilt', 'electron', 'electron-prebuilt-compile'];
    for (var _i = 0, candidates_1 = candidates; _i < candidates_1.length; _i++) {
        var candidate = candidates_1[_i];
        try {
            return {
                // the path to the electron executable is exported by the module
                executablePath: require(candidate),
                version: getElectronPackageVersion(candidate)
            };
        }
        catch (error) {
        }
    }
    return null;
}
/**
 * Check if the `v8-profiler` and `v8-debug` native binaries are compatibile with the given
 * Electron version.
 *
 * NOTE: If the `v8-profiler` or the `v8-debug` modules aren't installed at all this function will
 *       throw an error.
 *
 * @param Electron version, e.g. 1.3.0.
 * @return `true` if the native binaries are compatible.
 */
function isInspectorCompatible(electronVersion) {
    // require.resolve() will throw if it fails to find the module
    var packageDir = path.dirname(require.resolve(path.join(__dirname, '../node_modules/v8-profiler')));
    var binaryFile = node_pre_gyp_1.find(path.join(packageDir, 'package.json'), { runtime: 'electron', target: electronVersion });
    if (!fs.existsSync(binaryFile)) {
        return false;
    }
    packageDir = path.dirname(require.resolve(path.join(__dirname, '../node_modules/v8-debug')));
    binaryFile = node_pre_gyp_1.find(path.join(packageDir, 'package.json'), { runtime: 'electron', target: electronVersion });
    return fs.existsSync(binaryFile);
}
/**
 * Build an array of command line args that will be passed to `node-inspector`.
 *
 * Only options whose value differs from the default will be added to the
 * argument list, this makes it possible to override `node-inspector` options
 * via a config file.
 */
function getNodeInspectorCmdLineArgs(options) {
    var args = [];
    if (options.config) {
        args.push('--config', options.config);
    }
    if ((options.debugPort != null) && (options.debugPort !== exports.NODE_INSPECTOR_DEFAULTS.debugPort)) {
        args.push('-d', options.debugPort.toString());
    }
    if (options.webHost && (options.webHost !== exports.NODE_INSPECTOR_DEFAULTS.webHost)) {
        args.push('--web-host', options.webHost);
    }
    if ((options.webPort != null) && (options.webPort !== exports.NODE_INSPECTOR_DEFAULTS.webPort)) {
        args.push('--web-port', options.webPort.toString());
    }
    if (options.saveLiveEdit) {
        args.push('--save-live-edit', options.saveLiveEdit.toString());
    }
    if (options.preload === false) {
        args.push('--no-preload');
    }
    if (options.inject === false) {
        args.push('--no-inject');
    }
    if (options.hidden) {
        if (options.hidden instanceof Array) {
            options.hidden.forEach(function (pattern) { return args.push('--hidden', pattern); });
        }
        else {
            args.push('--hidden', options.hidden);
        }
    }
    if ((options.stackTraceLimit != null) &&
        (options.stackTraceLimit !== exports.NODE_INSPECTOR_DEFAULTS.stackTraceLimit)) {
        args.push('--stack-trace-limit', options.stackTraceLimit.toString());
    }
    if (options.sslKey) {
        args.push('--ssl-key', options.sslKey);
    }
    if (options.sslCert) {
        args.push('--ssl-cert', options.sslCert);
    }
    return args;
}
/**
 * Launch an Electron process that runs `node-inspector`.
 *
 * @param electronPath Full path to the Electron executable.
 */
function launchInspector(electronPath, options) {
    var scriptPath = require.resolve('node-inspector/bin/inspector.js');
    var inspector = child_process.fork(scriptPath, getNodeInspectorCmdLineArgs(options), { execPath: electronPath, silent: true });
    inspector.on('error', function (error) { return console.error(error); });
    inspector.on('message', function (msg) {
        if (msg.event === 'SERVER.LISTENING') {
            // node-inspector will print the address to the console,
            // so there's no need to do anything here
            console.info("Visit " + msg.address.url + " to start debugging.");
        }
        else if (msg.event === 'SERVER.ERROR') {
            console.error("Cannot start the server: " + msg.error.code + ".");
        }
    });
    inspector.on('close', function (exitCode, signal) {
        process.exit(exitCode);
    });
}
/**
 * Rebuild the native modules `node-inspector` uses to target the given Electron version.
 */
function rebuildInspector(electronPath, electronVersion, arch) {
    return __awaiter(this, void 0, void 0, function () {
        var rebuild;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    console.log('node-inspector binaries are incompatible or missing.');
                    console.log('Attempting to rebuild...');
                    try {
                        rebuild = require('./rebuild').rebuild;
                    }
                    catch (error) {
                        console.log('Failed to load electron-prebuilt, abandoning rebuild.');
                        throw error;
                    }
                    return [4 /*yield*/, rebuild(electronPath, electronVersion, arch)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function inspect(options) {
    return __awaiter(this, void 0, void 0, function () {
        var electron;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    electron = getElectronInfo(options.electron);
                    if (!electron) {
                        console.log('Electron not found.');
                        return [2 /*return*/];
                    }
                    if (!!isInspectorCompatible(electron.version))
                        return [3 /*break*/, 3];
                    if (!options.autoRebuild)
                        return [3 /*break*/, 2];
                    return [4 /*yield*/, rebuildInspector(electron.executablePath, electron.version)];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    console.warn("Native node-inspector modules are incompatible with Electron " + electron.version + ", " +
                        'and auto-rebuild is disabled, node-inspector may fail to run.');
                    _a.label = 3;
                case 3:
                    launchInspector(electron.executablePath, options);
                    return [2 /*return*/];
            }
        });
    });
}
exports.inspect = inspect;
